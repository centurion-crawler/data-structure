2-21
#include<bits/stdc++.h>
#define MAXN 1000
using namespace std;
int n;
int a[MAXN];
int main()
{
    cin>>n;
    for (int i=1;i<=n;i++)
        cin>>a[i];
    for (int i=1;i<=n/2;i++)
        swap(a[i],a[n-i+1]);
    for (int i=1;i<=n;i++)
        cout<<a[i]<<" ";
    return 0;
}
2-29
#include<bits/stdc++.h>
#define MAXN 1000
using namespace std;
int a[MAXN]={0},b[MAXN]={0},c[MAXN]={0},a_new[MAXN]={0};
bool dela[MAXN];
void init(int Na,int Nb,int Nc)
{
    for (int i=1;i<=Na;i++)
        cin>>a[i];
    for (int i=1;i<=Nb;i++)
        cin>>b[i];
    for (int i=1;i<=Nc;i++)
        cin>>c[i];
    memset(dela,sizeof(dela),false);
}
int main()
{
    int na,nb,nc;
    cin>>na>>nb>>nc;
    init(na,nb,nc);
    int pb=1,pc=1;
    int cnt=0;
    cout<<endl;
    for (int i=1;i<=na;i++)
    {
        while(b[pb]<a[i]) ++pb;
        while(c[pc]<a[i]) ++pc;
        cout<<i<<" "<<pb<<" "<<pc<<endl;
        if (a[i]==b[pb]&&a[i]==c[pc]) 
            {
                dela[i]=true; //标记删除的点
                cnt++;
            }
    }
    int *p=a+1;
    for (int i=1;i<=na-cnt;i++)
    {
        while (dela[p-a]) p++; 
        a_new[i]=*p;p++;
    }
    for (int i=1;i<=na-cnt;i++)
        cout<<a_new[i]<<" ";
    return 0;
}

2-30
#include<bits/stdc++.h>
#define MAXN 1000
using namespace std;
struct node
{
    int data;
    node* next;
    node* pre;
};
node *heada,*headb,*headc;
node* build(int N)
{
    int tmp;
    node* head;
    node* p1;
    node* p2;
    head=(node *)malloc(sizeof(node));
    cin>>tmp;
    head->data=tmp;
    head->pre=NULL;
    p1=head;
    for (int i=1;i<=N-1;i++)
    {
        p2=(node *)malloc(sizeof(node));
        cin>>tmp;
        p2->data=tmp;
        p1->next=p2;
        p2->pre=p1;
        p1=p2;
    }
    p1->next=NULL;
    return head;
}
void lstdel()
{
    node *pa=heada,*pb=headb,*pc=headc;
    while (pa!=NULL)
    {
        while(pb->data<pa->data&&pb->next!=NULL) pb=pb->next;
        while(pc->data<pa->data&&pc->next!=NULL) pc=pc->next;
        if (pa->data==pb->data&&pa->data==pc->data)
        {
            if (pa==heada) 
            {
                heada->next->pre=NULL;
                node *ha=heada;
                heada=pa->next;
                pa=pa->next;
                free(ha);
            }
            else if (pa->next==NULL)
            {
                pa->pre->next=NULL;
                free(pa);
                break;
            }
            else
            {
                node *p=pa;
                pa->pre->next=pa->next;
                pa->next->pre=pa->pre;
                pa=pa->next;
                free(p);
            }            
        }
        else
        {
            pa=pa->next;
        }
        
    }
}
void getlst(node * Ha)
{
    while(Ha!=NULL)
    {
        printf("%d ",Ha->data);
        Ha=Ha->next;
    }
}
int main()
{
    int na,nb,nc;
    cin>>na>>nb>>nc;
    heada=build(na);
    headb=build(nb);
    headc=build(nc);
    lstdel();
    getlst(heada);
    return 0;
}

2-39
#include<bits/stdc++.h>
#define MAXN 100
using namespace std;
long long x[100]={1};
long long c[100]={0};
long long e[100]={0};
int main()
{
    long long p=0,x0,m;
    cin>>x0>>m;
    for (int i=1;i<=m;i++)
        cin>>c[i];
    for (int i=1;i<=m;i++)
        cin>>e[i];
    for (int i=1;i<=e[m];i++)
        x[i]=x[i-1]*x0;
    for (int i=1;i<=m;i++)
        p+=c[i]*x[e[i]];
    cout<<p;
    return 0;
}

3-15
#include<bits/stdc++.h>
#define MAXN 100
using namespace std;
int stacklength;
int a[MAXN]={0};//栈数组
int *p0,*p1;//栈顶指针
void inistack()//初始化栈
{
    memset(a,sizeof(a),0);
    p0=a,p1=a+stacklength;
}
int pushtwi(int i,int x)//在栈顶插入元素
{
    if (i)
    {
        if (p1-p0>1)
            {
                p1--;
                *p1=x;
                return 1;
            }
        else return -1; 
    }
    else
    {
        if (p1-p0>1)
        {
            p0++;
            *p0=x;
            return 1;
        }
        else return -1;
    }
    
}
int poptwi(int i)//弹出栈顶元素
{
    if (i)
    {
        if (a+stacklength>p1)
        {
            int num=*p1;
            *p1=0;
            p1++;
            return num;
        }
        else return -1;
    }
    else 
    {
        if (p0>a)
        {
            int num=*p0;
            *p0=0;
            p0--;
            return num;
        }
        else return -1;
    }
}
void opstack()//pop或者push操作
{
    int opnum;
    int statupush,statupop,I,X,op;
    cout<<"input the operator times:";
    cin>>opnum;
    for (int i=1;i<=4;++i)
    {
        cin>>I>>X>>op;
        if (op) 
            {
                statupush=pushtwi(I,X);cout<<statupush<<" ";
            }
        else 
            {
                statupop=poptwi(I);
                cout<<statupop<<" ";
            }
    }
}
int main()
{
    cin>>stacklength;
    inistack();
    return 0;
}

3-19
#include<bits/stdc++.h>
using namespace std;
stack <int> a;//定义栈
bool match_braket(char s1,char s2)//判断栈顶元素与当前元素是否匹配
{
    if (s1=='{'&& s2=='}') return true;
    if (s1=='['&& s2==']') return true;
    if (s1=='('&& s2==')') return true;
    return false;
}
int main()
{
    string c;
    cin>>c;
    while(!a.empty())
        a.pop();
    for (int i=0;i<c.length();i++)
    {
        if (a.size()==0) 
            {
                a.push(c[i]);//若栈为空则直接push
                continue;
            }
        if (match_braket(a.top(),c[i]))//如果当前元素栈顶元素匹配则弹出
            a.pop();
            else a.push(c[i]);
    }
    if (!a.empty())
        cout<<"The brakets don't match";
        else cout<<"The brakets match";
return 0;
}

3-28
#include <stdio.h>
#include <stdlib.h>
#define ERROR 0
#define OK 1
#define OVERFLOW 0
typedef int qelemType;
typedef struct queue
{
	qelemType data;
	struct queue *next;
}queue,*linkqueue;
typedef struct
{
	linkqueue rear;
	int length;
}sqqueue;
void initQueue(sqqueue &queue)//置空队列
{
	queue.rear=(linkqueue)malloc(sizeof(queue));
	queue.rear->next=queue.rear;
}

int emptyQueue(sqqueue &queue)//判队列是否为空
{
	if(queue.rear->next==queue.rear)
		return OK;
	else
		return 0;
}
int enqueue(sqqueue &queue,qelemType e)
{
	linkqueue p;
	p=(linkqueue)malloc(sizeof(queue));
	if(!p)
		return OVERFLOW;
	p->data=e;
	p->next=queue.rear->next;
	queue.rear->next=p;
	queue.rear=p;
	return OK;
}
int delqueue(sqqueue &queue,qelemType &e)
{
	linkqueue p;
	if(queue.rear->next==queue.rear)
		return ERROR;//若队列为空返回0
	p=queue.rear->next->next;//循环链表队列队尾指针下一结点(也即头结点)的下一结点(即队头指针)
	e=p->data;
	queue.rear->next->next=p->next;
	free(p);
	return OK;
}
int main()
{
	sqqueue queue2;
	qelemType num;
	initQueue(queue2);
	if(emptyQueue(queue2))
		printf("该队列目前为空!\n");
	else
		printf("该队列不为空!\n");
	for(int i=1;i<=10;i++)
		if(enqueue(queue2,i))
			printf("元素%d成功入列!\n",i);
	printf("\n\n");
	for(int j=1;j<=9;j++)
		if(delqueue(queue2,num))
			printf("元素%d成功出列!\n",num);
	if(emptyQueue(queue2))
		printf("该队列目前为空!\n");
	else
		printf("该队列不为空!\n");
	return 0;
}
3-32
#include <bits/stdc++.h>
using namespace std;
queue <int> a;
int main()
{
    int n,k;
    \\k阶斐波那契f0=0,f1=0,...fk-2=0,fk-1=0;
    for (int i=0;i<k-1;i++)
        a.push(0);
        a.push(1);
    for (int i=k;i<=n;i++)
        {
            a.push(2*a.front()-a.back());//fi=2*f(i-1)-f(i-k-1) 分别为队头和队尾
            if (a.size()>k) a.pop();
        }
    cout<<a.front();
}


马踏棋盘
#include <bits/stdc++.h>
#define N 8
#define INF 999999999
using namespace std;

int dx[9]={0,2,2,-2,-2,1,1,-1,-1};
int dy[9]={0,-1,1,1,-1,-2,2,-2,2};
bool MAP[N+1][N+1];
int sign[N+1][N+1]={0};
void print()
{
    for (int i=1;i<=N;i++)
        {
            for (int j=1;j<=N;j++)
                cout<<sign[i][j]<<" ";
        cout<<endl;
        }
}
bool judge(int i,int j)
{
    if (!MAP[i][j]&&i>0&&i<N+1&&j>0&&j<N+1)
    return true;
    else return false;
}
int judgepath(int x_,int y_)
{
	int c;
	int tag=0;
	for (c = 0; c < 8; c++)
	{
		if (judge(x_ + dx[c], y_ + dy[c]))
		{
			tag++;
		}
	}
	return tag;
}
void walk(int x,int y,int cnt)
{
    cout<<x<<" "<<y<<endl;
    if (cnt==N*N)
        {
            print();
            exit(0);
        }
    int MIN=INF,rec;
    for (int i=1;i<=8;i++)
    {
        if (!judge(x+dx[i],y+dy[i]))
              continue;
        int path=judgepath(x+dx[i],y+dy[i]);  
            if (MIN>path)
            {
                MIN=path;
                rec=i;
            }
    }
    if (MIN!=INF)
    {
                sign[x+dx[rec]][y+dy[rec]]=cnt+1;
                MAP[x+dx[rec]][y+dy[rec]]=true;
                walk(x+dx[rec],y+dy[rec],cnt+1);
                MAP[x+dx[rec]][y+dy[rec]]=false;
                sign[x+dx[rec]][y+dy[rec]]=0;
    } 
        return;
}
void init()
{
    int x0,y0;
    memset(MAP,sizeof(MAP),false);
    cin>>x0>>y0;
    sign[x0][y0]=1;
    MAP[x0][y0]=true;
    walk(x0,y0,1);
}
int main()
{
    init();
    return 0;
}